{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","handleChange","event","handleClick","target","value","className","selectedButton","onClick","Circles","App","setState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UA8CeA,G,YA3CQ,SAACC,GAEpB,IAAMC,EAAe,SAACC,GAClBF,EAAMG,YAAYD,EAAME,OAAOC,QAGnC,OACI,yBAAKC,UAAU,kBACX,4BACIA,UAAoC,aAAzBN,EAAMO,eAAgC,WAAa,OAC9DC,QAASP,EACTI,MAAM,YAEoB,aAAzBL,EAAMO,eAAgC,oBAAsB,mBAGjE,4BACID,UAAoC,aAAzBN,EAAMO,eAAgC,WAAa,OAC9DC,QAASP,EACTI,MAAM,YAEoB,aAAzBL,EAAMO,eAAgC,oBAAsB,mBAGjE,4BACID,UAAoC,aAAzBN,EAAMO,eAAgC,WAAa,OAC9DC,QAASP,EACTI,MAAM,YAEoB,aAAzBL,EAAMO,eAAgC,oBAAsB,mBAGjE,4BACID,UAAoC,aAAzBN,EAAMO,eAAgC,WAAa,OAC9DC,QAASP,EACTI,MAAM,YAEoB,aAAzBL,EAAMO,eAAgC,oBAAsB,sB,OCH9DE,G,MAlCC,SAACT,GACb,OACI,yBAAKM,UAAU,WACX,qCACIA,UAAU,OADd,YAEwC,aAAzBN,EAAMO,eAAgC,WAAa,QAFlE,KAOA,qCACID,UAAU,OADd,YAEwC,aAAzBN,EAAMO,eAAgC,WAAa,QAFlE,KAOA,qCACID,UAAU,OADd,YAEwC,aAAzBN,EAAMO,eAAgC,WAAa,QAFlE,KAOA,qCACID,UAAU,OADd,YAEwC,aAAzBN,EAAMO,eAAgC,WAAa,QAFlE,QCWGG,E,YAhCb,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KAMRG,YAAc,SAACE,GACb,EAAKM,SAAS,CACZJ,eAAgBF,KAPlB,EAAKO,MAAQ,CACXL,eAAgB,YAHD,E,sEAcjB,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACE,kBAAC,EAAD,CACEC,eAAgBM,KAAKD,MAAML,eAC3BJ,YAAaU,KAAKV,cAGpB,kBAAC,EAAD,CACEI,eAAgBM,KAAKD,MAAML,uB,GAzBrBO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.420bdf33.chunk.js","sourcesContent":["import React from 'react'\nimport './CircleSelector.css'\n\nconst CircleSelector = (props) => {\n    \n    const handleChange = (event) => {\n        props.handleClick(event.target.value)\n    };\n    \n    return (\n        <div className=\"CircleSelector\">\n            <button \n                className={props.selectedButton === \"Button 1\" ? \"selected\" : \"null\"} \n                onClick={handleChange}\n                value=\"Button 1\"\n            >\n                {props.selectedButton === \"Button 1\" ? \"CIRCLE SELECTED 1\" : \"SELECT CIRCLE 1\"}\n            </button>\n            \n            <button \n                className={props.selectedButton === \"Button 2\" ? \"selected\" : \"null\"} \n                onClick={handleChange}\n                value=\"Button 2\"\n            >\n                {props.selectedButton === \"Button 2\" ? \"CIRCLE SELECTED 2\" : \"SELECT CIRCLE 2\"}\n            </button>\n            \n            <button \n                className={props.selectedButton === \"Button 3\" ? \"selected\" : \"null\"} \n                onClick={handleChange}\n                value=\"Button 3\"\n            >\n                {props.selectedButton === \"Button 3\" ? \"CIRCLE SELECTED 3\" : \"SELECT CIRCLE 3\"}\n            </button>\n            \n            <button \n                className={props.selectedButton === \"Button 4\" ? \"selected\" : \"null\"} \n                onClick={handleChange}\n                value=\"Button 4\"\n            >\n                {props.selectedButton === \"Button 4\" ? \"CIRCLE SELECTED 4\" : \"SELECT CIRCLE 4\"}\n            </button>\n        </div>\n    )\n}\n\nexport default CircleSelector;","import React from 'react'\nimport './Circles.css'\n\nconst Circles = (props) => {\n    return (\n        <div className=\"Circles\">\n            <div \n                className=\"div\"\n                className={props.selectedButton === \"Button 1\" ? \"selected\" : \"null\"} \n            >\n                1\n            </div>\n            \n            <div \n                className=\"div\"\n                className={props.selectedButton === \"Button 2\" ? \"selected\" : \"null\"} \n            >\n                2\n            </div>\n            \n            <div \n                className=\"div\"\n                className={props.selectedButton === \"Button 3\" ? \"selected\" : \"null\"} \n            >\n                3\n            </div>\n            \n            <div \n                className=\"div\"\n                className={props.selectedButton === \"Button 4\" ? \"selected\" : \"null\"} \n            >\n                4\n            </div>\n        </div>\n    )\n}\n\nexport default Circles\n","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector/CircleSelector'\nimport Circles from './components/Circles/Circles'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedButton: \"Button 1\"\n    };\n  }\n\n  handleClick = (value) => {\n    this.setState({\n      selectedButton: value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector \n            selectedButton={this.state.selectedButton}\n            handleClick={this.handleClick}\n          />\n          \n          <Circles \n            selectedButton={this.state.selectedButton}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}